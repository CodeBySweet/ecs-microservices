# .github/workflows/cd.yml (Updated Metrics)

name: Application Deployment

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose an action"
        required: true
        default: deploy
        type: choice
        options:
          - deploy
          - destroy

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  call-ci:
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  deploy:
    runs-on: self-hosted
    needs: call-ci

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make scripts executable
        run: chmod +x ./scripts/*.sh

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_ARN }}
          aws-region: "us-east-1"

      - name: Start Timer
        id: start-timer
        run: echo "START_TS=$(date +%s)" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0

      - name: Generate backend.tf
        run: |
          cat <<EOF > terraform/backend.tf
          terraform {
            backend "s3" {
              bucket = "ecs-deploy-app-shirin"
              key    = "app/terraform"
              region = "us-east-1"
              encrypt = true
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init -reconfigure
        working-directory: terraform

      - name: Download image URIs from S3
        run: |
          aws s3 cp s3://my-shared-artifacts-bucket/image-uris-${{ needs.call-ci.outputs.short_sha }}.txt image-uris.txt

      - name: Read image URIs into env vars
        id: images
        run: |
          while IFS= read -r line; do
            case "$line" in
              *main*) echo "main_image=$line" >> $GITHUB_ENV ;;
              *auth*) echo "auth_image=$line" >> $GITHUB_ENV ;;
              *product*) echo "product_image=$line" >> $GITHUB_ENV ;;
              *user*) echo "user_image=$line" >> $GITHUB_ENV ;;
            esac
          done < image-uris.txt

      # ====== APPLY STEPS ======
      - name: Reset Timer for Apply
        if: github.event.inputs.action == 'deploy'
        run: echo "START_APPLY=$(date +%s)" >> $GITHUB_ENV

      - name: Terraform Apply
        if: github.event.inputs.action == 'deploy'
        run: |
          terraform apply \
            -var="image_main=${{ env.main_image }}" \
            -var="image_auth=${{ env.auth_image }}" \
            -var="image_product=${{ env.product_image }}" \
            -var="image_user=${{ env.user_image }}" \
            -var-file="app.tfvars" \
            -auto-approve
        working-directory: terraform

      - name: Emit Apply Duration
        if: github.event.inputs.action == 'deploy' && always()
        run: |
          END=$(date +%s)
          DURATION=$((END - START_APPLY))
          ./scripts/emit-metrics.sh "cd_duration_seconds" "$DURATION" "all" "apply"

      - name: Emit Apply Success Metric
        if: github.event.inputs.action == 'deploy'
        run: |
          STATUS=$([[ "${{ job.status }}" == "success" ]] && echo 1 || echo 0)
          ./scripts/emit-metrics.sh "cd_apply_success" "$STATUS" "all" "terraform-apply"

      # ====== DESTROY STEPS ======
      - name: Reset Timer for Destroy
        if: github.event.inputs.action == 'destroy'
        run: echo "START_DESTROY=$(date +%s)" >> $GITHUB_ENV

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform destroy \
            -var="image_main=${{ env.main_image }}" \
            -var="image_auth=${{ env.auth_image }}" \
            -var="image_product=${{ env.product_image }}" \
            -var="image_user=${{ env.user_image }}" \
            -var-file="app.tfvars" \
            -auto-approve
        working-directory: terraform

      - name: Emit Destroy Duration
        if: github.event.inputs.action == 'destroy' && always()
        run: |
          END=$(date +%s)
          DURATION=$((END - START_DESTROY))
          ./scripts/emit-metrics.sh "cd_duration_seconds" "$DURATION" "all" "destroy"

      - name: Emit Destroy Success Metric
        if: github.event.inputs.action == 'destroy'
        run: |
          STATUS=$([[ "${{ job.status }}" == "success" ]] && echo 1 || echo 0)
          ./scripts/emit-metrics.sh "cd_destroy_success" "$STATUS" "all" "terraform-destroy"

      # ====== FINAL JOB METRICS ======
      - name: Emit CD Job Success Metrics per Service
        run: |
          STATUS=$([[ "${{ job.status }}" == "success" ]] && echo 1 || echo 0)
          for svc in main auth product user; do
            ./scripts/emit-metrics.sh "cd_job_success" "$STATUS" "$svc" "application-deploy"
          done

      - name: Emit CD Job Duration Metric
        if: always()
        run: |
          END=$(date +%s)
          DURATION=$((END - START_TS))
          ./scripts/emit-metrics.sh "cd_job_duration_seconds" "$DURATION" "all" "application-deploy"
